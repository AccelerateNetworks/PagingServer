;;;; PagingServer configuration file

;; Uncommented values are mandatory and should be filled-up.
;; Commented-out values are optional.

;; See README.rst file for more details on installation/configuration.


[sip]
domain = <sip server>
user = <username>
pass = <password>


[audio]

;; klaxon: paging tone to play for callers.
;;  Can be left empty (default) to have none.
;;  If sample path is not *.wav, it will be converted with ffmpeg (to wav in temp-dir).
; klaxon = /etc/paging.wav

;; klaxon-max-length: simple sanity-check limit on klaxon length (in seconds).
;;  Default is 10s.
; klaxon-max-length = 5.56

;; pjsua-device: regexp to pick pjsua output device by name.
;;  Will raise error on >1 match. Numeric id can be used instead.
;;  Use --dump-sound-devices cli option to see all devices available.
;;  Default is to use "system" device, which seem to be default JACK output name.
; pjsua-device = ^system$

;; pjsua-conf-port: regexp to pick pjsua output conference port by name.
;;  Will raise error on >1 match. Numeric id can be used instead.
;;  Use --dump-conf-ports cli option to see all ports available.
;;  Default is to use any available port, will signal error if there's more than one.
; pjsua-conf-port =

;; jack-output-port: regexp to pick jack output port(s) to use for pjsua and music.
;;  Default is to use ALL output ports available for both,
;;   i.e. output thru all connected cards/speakers/whatever.
;;  No error will be raised if no ports get matched here, as they may appear later.
; jack-output-ports =

;; jack-music-client-name: regexp for jack client names to consider to be music players.
;;  Can have at least one capture group, to use as a shorthand in jack-music-links.
;;  Use (?:...) to avoid having any regexp capture groups, if necessary.
;;  Default is: ^mpd\.paging:(.*)$
; jack-music-client-name = ^mpd\.paging:(.*)$

;; jack-music-links: pairs of "in--out" regexps to connect music ports in jack to output ports.
;;  Use this to specify which player plays on which sound card or a set of speakers.
;;  Multiple pairs should be separated by spaces.
;;  Any matched music client (by "in" regexp) will only be connected to specified outputs.
;;  Any non-matched music client will be connected to all "jack-output-port" outputs.
;;  "out" regexp only matches ports that are already filtered through "jack-output-port".
;;  Example: myradio---street-speakers radio$---any-radio-speakers \.announcement$---
;;  Default: left---left right---right (i.e. any matched music client to all outputs)
; jack-music-links = left---left right---right

;; jack-autostart: whether to start the jack server if it's not running (yes/no).
;;  JACK_NO_START_SERVER env var (common to jack apps) overrides this setting.
; jack-autostart = yes

;; jack-{server,client}-name: only useful for advanced setups.
;;  server name can also be controlled via
;;   JACK_DEFAULT_SERVER env var (overidden by this setting, if specified).
;;  Unique client name is not enforced.
; jack-server-name = default
; jack-client-name = some-client-name


[server]

;; debug: verbose operation mode.
; debug = no

;; pjsua-log-level: pjsua lib logging level.
;;  Only used if debug is enabled.
;;  Zero is only for fatal errors, higher levels are more noisy.
; pjsua-log-level = 0

;; sentry_dsn: use specified Sentry instance  to capture errors/logging using "raven" module.
; sentry_dsn = https://0b915e29784f479f93db6ae2870515b6:b2fb7becafdc4c259b813a8f84f5b855@sentry.finn.io/2
